name: Terraform Apply on Dev Server
on:
  push:
    branches:
#       - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VERSION: '~> 1.4.0'
  TG_VERSION: 'latest'
  NODE_VERSION: '16.x'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Checkout Terraform-live repo
      uses: actions/checkout@v3
      with:
        repository: 'nanoMFG/gsaweb-terraform-live'
        path: './gsaweb-terraform-live'
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
      
    - name: Install Terragrunt
      uses: autero1/action-terragrunt@v1.3.2
      with:
        terragrunt_version: ${{env.TG_VERSION}}
        token: ${{ secrets.GITHUB_TOKEN }}
#       run: |
#         wget https://github.com/gruntwork-io/terragrunt/releases/download/${{ env.TG_VERSION }}/terragrunt_linux_amd64
#         chmod +x terragrunt_linux_amd64
#         sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
      
    - name: Terraform Init and Apply
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          cd "./gsaweb-terraform-live/gsaweb/${{ github.event.inputs.environment }}/server"
        else
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            cd ./gsaweb-terraform-live/gsaweb/dev/server
          else
            cd ./gsaweb-terraform-live/gsaweb/production/server
          fi
        fi
        terragrunt apply -auto-approve
        bucket_name=$(terragrunt output -raw ansible_bucket_name)
        echo "bucket_name=$bucket_name" >> $GITHUB_OUTPUT
        app_prefix=$(terragrunt output -raw app_prefix)
        echo "app_prefix=$app_prefix" >> $GITHUB_OUTPUT
        env=$(terragrunt output -raw env)
        echo "env=$env" >> $GITHUB_OUTPUT

  build:
    name: 'Build and Deploy'
    needs: terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install Ansible and AWS collections
      run: |
        python -m pip install --upgrade pip
        pip install ansible boto3 botocore
        ansible-galaxy collection install community.aws amazon.aws
        ansible-galaxy install geerlingguy.apache
        
      # Move to after build steps, once tested
      # Note user and pass are set in the env and passed in, for Apache basic auth
      # but will only be used by the non-production deployments 
    - name: Run Ansible Playbook to Setup Apache
      env:
        MYUSER: ${{ secrets.MYUSER }}
        MYPASS: ${{ secrets.MYPASS }}
        BUCKET_NAME: ${{ steps.terraform.outputs.bucket_name }}
        KEYED_GROUP_PREFIX: ${{ steps.terraform.outputs.app_prefix }}
        APACHE_ENV: ${{ steps.terraform.outputs.env }}
      run: |
        cd .ansible
        ansible-playbook setup-apache.yml -e "apache_environment=$APACHE_ENV ansible_aws_ssm_bucket_name=$BUCKET_NAME myuser=$MYUSER mypass=$MYPASS"
        cd ..

    - name: Install Dependencies
      run: npm ci
      
    - name: Set up environment
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
            echo "${{ secrets.APP_DEV_ENV }}" > .env
          elif [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            echo "${{ secrets.APP_PROD_ENV }}" > .env
          fi
        else
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "${{ secrets.APP_DEV_ENV }}" > .env
          else
            echo "${{ secrets.APP_PROD_ENV }}" > .env
          fi
        fi
      
    - name: Build
      run: npm run build
