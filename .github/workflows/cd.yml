name: CD Workflow
on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**.js'
      - '**.jsx'
      - '**.css'
      - '**.html'
      - 'package*.json'
      - 'src/**/*.json'
      - 'public/**/*.json'
      - '.github/workflows/**'
      - '.ansible/**'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: 'us-east-2'
  TF_VERSION: '~> 1.4.0'
  TG_VERSION: 'latest'
  NODE_VERSION: '16.x'
  TF_LIVE_VERSION: 'v1.1.2'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{steps.apply.outputs.bucket_name}}
      app_prefix: ${{steps.apply.outputs.app_prefix}}
      env: ${{steps.apply.outputs.env}}
      instance_name: ${{steps.apply.outputs.instance_name}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Checkout Terraform-live repo
      uses: actions/checkout@v3
      with:
        repository: 'nanoMFG/gsaweb-terraform-live'
        path: './gsaweb-terraform-live'
        token: ${{ secrets.TERRAFORM_LIVE_TOKEN }}
        ref: ${{ env.TF_LIVE_VERSION }}
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
      
    - name: Install Terragrunt
      uses: autero1/action-terragrunt@v1.3.2
      with:
        terragrunt_version: ${{env.TG_VERSION}}
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Terraform Init and Apply
      id: apply
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          cd "./gsaweb-terraform-live/gsaweb/${{ github.event.inputs.environment }}/${{ env.AWS_REGION }}"
          echo "Deploying from config:  gsaweb/${{ github.event.inputs.environment }}/${{ env.AWS_REGION }}"
          terragrunt run-all apply --terragrunt-non-interactive
          cd ansible_ssm && bucket_name=$(terragrunt output -raw ansible_bucket_name) && cd ..
          echo "bucket_name=$bucket_name" >> $GITHUB_OUTPUT
          echo "app_prefix=gsaweb_${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else 
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            cd ./gsaweb-terraform-live/gsaweb/prod/${{ env.AWS_REGION }}
            echo "Deploying from config:  gsaweb/prod/${{ env.AWS_REGION }}"
            echo "app_prefix=gsaweb_prod" >> $GITHUB_OUTPUT
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            cd ./gsaweb-terraform-live/gsaweb/dev/${{ env.AWS_REGION }}
            echo "Deploying from config:  gsaweb/dev/${{ env.AWS_REGION }}"
            echo "app_prefix=gsaweb_dev" >> $GITHUB_OUTPUT
            echo "env=dev" >> $GITHUB_OUTPUT
          fi
          terragrunt run-all apply --terragrunt-non-interactive
          cd ansible_ssm && bucket_name=$(terragrunt output -raw ansible_bucket_name) && cd ..
          echo "bucket_name=$bucket_name" >> $GITHUB_OUTPUT
        fi

  build:
    name: 'Build and Deploy'
    needs: terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install Ansible and AWS collections
      run: |
        python -m pip install --upgrade pip
        pip install ansible boto3 botocore
        ansible-galaxy collection install community.aws amazon.aws
        ansible-galaxy install geerlingguy.apache

    - name: Run Ansible Playbook to Setup Apache
      env:
        MYUSER: ${{ secrets.DEV_MYUSER }}
        MYPASS: ${{ secrets.DEV_MYPASS }}
        BUCKET_NAME: ${{ needs.terraform.outputs.bucket_name }}
        APACHE_ENV: ${{ needs.terraform.outputs.env }}
      run: |
        cd .ansible
        ansible-playbook setup-apache.yml -e "apache_environment=$APACHE_ENV ansible_aws_ssm_bucket_name=$BUCKET_NAME myuser=$MYUSER mypass=$MYPASS"
        cd ..

    - name: Install Dependencies
      run: npm ci
      
    - name: Set up environment
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            echo "Setting env for prod"
            echo "${{ secrets.APP_PROD_ENV }}" > .env
          elif [ "${{ github.event.inputs.environment }}" == "dev" ]; then
            echo "Setting env for dev"
            echo "${{ secrets.APP_DEV_ENV }}" > .env
          elif [ "${{ github.event.inputs.environment }}" == "qa" ]; then
            echo "Setting env for qa"
            echo "${{ secrets.APP_QA_ENV }}" > .env
          else
            echo "No or invalid environment specified"
            exit 1
          fi
        else
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "${{ secrets.APP_PROD_ENV }}" > .env
          else
            echo "${{ secrets.APP_DEV_ENV }}" > .env
          fi
        fi
      
    - name: Build
      run: npm run build

    - name: Run Ansible Playbook to Deploy App
      env:
        BUCKET_NAME: ${{ needs.terraform.outputs.bucket_name }}
        APACHE_ENV: ${{ needs.terraform.outputs.env }}

      run: |
        cd .ansible
        ansible-playbook deploy-app.yml -e "apache_environment=$APACHE_ENV ansible_aws_ssm_bucket_name=$BUCKET_NAME"
        cd ..
